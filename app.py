from flask import Flask, render_template, request, jsonify, flash, redirect, url_for, session, send_from_directory
from werkzeug.security import generate_password_hash, check_password_hash
from fusionbrain_api import FusionBrainAPI
from contextlib import closing
from dotenv import load_dotenv
import mysql.connector
import threading
import requests
import logging
import urllib3
import difflib
import json
import time
import os
import re

load_dotenv()
logging.basicConfig(level=logging.INFO)

urllib3.disable_warnings(urllib3.exceptions.InsecureRequestWarning)
SECRET_KEY = os.environ.get('SECRET_KEY')

MYSQL_USER = os.getenv('MYSQL_USER')
MYSQL_PASSWORD = os.getenv('MYSQL_PASSWORD')
MYSQL_HOST = os.getenv('MYSQL_HOST')
MYSQL_DB = os.getenv('MYSQL_DB')


def get_db_connection():
    connection = mysql.connector.connect(
        host=MYSQL_HOST,
        user=MYSQL_USER,
        password=MYSQL_PASSWORD,
        database=MYSQL_DB
    )
    return connection


def fetch_initial_token():
    try:
        connection = get_db_connection()
        cursor = connection.cursor()
        cursor.execute("SELECT initial_token FROM tokens LIMIT 1;")
        token = cursor.fetchone()
        cursor.close()
        connection.close()
        if token:
            print("üìå Initial Token:", token[0])
            return token[0]
        else:
            print("‚ùå Initial Token –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return None
    except Exception as e:
        print("‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", e)
        return None


def refresh_token():
    url = "https://ngw.devices.sberbank.ru:9443/api/v2/oauth"
    payload = {'scope': 'GIGACHAT_API_PERS'}
    headers = {
        'Content-Type': 'application/x-www-form-urlencoded',
        'Accept': 'application/json',
        'RqUID': '77644f17-cf3d-4604-8420-decd56e43e6d',
        'Authorization': f'Basic {SECRET_KEY}'
    }

    try:
        response = requests.post(url, headers=headers, data=payload, verify=False)
        if response.status_code == 200:
            new_token = response.json().get('access_token')
            if new_token:
                conn = get_db_connection()
                cursor = conn.cursor()
                cursor.execute("UPDATE tokens SET initial_token = %s WHERE id = 1;", (new_token,))
                conn.commit()
                conn.close()
                print("üîÑ Initial Token –æ–±–Ω–æ–≤–ª—ë–Ω!")
                return new_token
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞: {response.status_code}")
    except requests.RequestException as e:
        print(f"‚ö† –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: {str(e)}")
    return None


def token_updater():
    while True:
        refresh_token()
        time.sleep(1650)


refresh_token()

threading.Thread(target=token_updater, daemon=True).start()

app = Flask(__name__)
app.secret_key = 'your_secret_key'
app.config['SECRET_KEY'] = SECRET_KEY

# –°–æ–∑–¥–∞—ë–º —ç–∫–∑–µ–º–ø–ª—è—Ä API –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
fusionbrain = FusionBrainAPI()
generation_tasks = {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤
conversation_history = []


def get_custom_reply(question):
    normalized_question = re.sub(r'\W+', ' ', question.strip().lower())
    custom_replies = {
        "–∫–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç": "–ß—Ç–æ-—Ç–æ –º–Ω–µ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ —Ç–≤–æ—ë –∏–º—è —Ç–æ - –∫–æ—Ç–æ—Ä—ã–º —Ç–µ–±—è –Ω–∞–∑–≤–∞–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª–∏",
        "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç": "–ß—Ç–æ-—Ç–æ –º–Ω–µ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ —Ç–≤–æ—ë –∏–º—è —Ç–æ - –∫–æ—Ç–æ—Ä—ã–º —Ç–µ–±—è –Ω–∞–∑–≤–∞–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª–∏",
        "–∫–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?": "–ß—Ç–æ-—Ç–æ –º–Ω–µ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ —Ç–≤–æ—ë –∏–º—è —Ç–æ - –∫–æ—Ç–æ—Ä—ã–º —Ç–µ–±—è –Ω–∞–∑–≤–∞–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª–∏",
        "–∫–∞–∫ –º–µ–Ω—è –∑–≤–∞—Ç—å": "–ß—Ç–æ-—Ç–æ –º–Ω–µ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ —Ç–≤–æ—ë –∏–º—è —Ç–æ - –∫–æ—Ç–æ—Ä—ã–º —Ç–µ–±—è –Ω–∞–∑–≤–∞–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª–∏",
        "–ö–∞–∫ –º–µ–Ω—è –∑–æ–≤—É—Ç?": "–ß—Ç–æ-—Ç–æ –º–Ω–µ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ —Ç–≤–æ—ë –∏–º—è —Ç–æ - –∫–æ—Ç–æ—Ä—ã–º —Ç–µ–±—è –Ω–∞–∑–≤–∞–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª–∏",
        "–ö–∞–∫ –º–µ–Ω—è –∑–≤–∞—Ç—å": "–ß—Ç–æ-—Ç–æ –º–Ω–µ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ —Ç–≤–æ—ë –∏–º—è —Ç–æ - –∫–æ—Ç–æ—Ä—ã–º —Ç–µ–±—è –Ω–∞–∑–≤–∞–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª–∏",
        "–∫–∞–∫ –º–µ–Ω—è –∑–≤–∞—Ç—å?": "–ß—Ç–æ-—Ç–æ –º–Ω–µ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ —Ç–≤–æ—ë –∏–º—è —Ç–æ - –∫–æ—Ç–æ—Ä—ã–º —Ç–µ–±—è –Ω–∞–∑–≤–∞–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª–∏",
        "–ö–∞–∫ –º–µ–Ω—è –∑–≤–∞—Ç—å?": "–ß—Ç–æ-—Ç–æ –º–Ω–µ –ø–æ–¥—Å–∫–∞–∑—ã–≤–∞–µ—Ç —á—Ç–æ —Ç–≤–æ—ë –∏–º—è —Ç–æ - –∫–æ—Ç–æ—Ä—ã–º —Ç–µ–±—è –Ω–∞–∑–≤–∞–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª–∏",
        "–∫–∞–∫–æ–π –ª—É—á—à–∏–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è": "–ö–æ–Ω–µ—á–Ω–æ, —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —É–∂–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å!",
        "–∫–∞–∫–æ–π –ª—É—á—à–∏–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è?": "–ö–æ–Ω–µ—á–Ω–æ, —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —É–∂–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å!",
        "–ª—É—á—à–∏–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è": "–ö–æ–Ω–µ—á–Ω–æ, —Ç–æ—Ç, –∫–æ—Ç–æ—Ä—ã–º —Ç—ã —É–∂–µ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–µ—à—å!",
        "–∫–∞–∫ —Å—Ç–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º": "–ù–∞—á–Ω–∏—Ç–µ —Å –æ—Å–Ω–æ–≤, –ø—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∏ –Ω–µ –±–æ–π—Ç–µ—Å—å –æ—à–∏–±–æ–∫.",
        "—á—Ç–æ –¥–µ–ª–∞—Ç—å —á—Ç–æ–±—ã —Å—Ç–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç–æ–º": "–ù–∞—á–Ω–∏—Ç–µ —Å –æ—Å–Ω–æ–≤, –ø—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –∏ –Ω–µ –±–æ–π—Ç–µ—Å—å –æ—à–∏–±–æ–∫.",
        "–∑–∞—á–µ–º –∏–∑—É—á–∞—Ç—å –∞–ª–≥–æ—Ä–∏—Ç–º—ã": "–ê–ª–≥–æ—Ä–∏—Ç–º—ã –ø–æ–º–æ–≥–∞—é—Ç —Ä–µ—à–∞—Ç—å –∑–∞–¥–∞—á–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –∏ –ø–æ–Ω–∏–º–∞—é—Ç —Ñ—É–Ω–¥–∞–º–µ–Ω—Ç–∞–ª—å–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è.",
        "–∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å –ø–µ—Ä–≤—ã–π —è–∑—ã–∫ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è": "–í—ã–±–∏—Ä–∞–π—Ç–µ —è–∑—ã–∫, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–¥—Ö–æ–¥–∏—Ç –ø–æ–¥ –≤–∞—à–∏ —Ü–µ–ª–∏ –∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã. Python ‚Äî –æ—Ç–ª–∏—á–Ω—ã–π —Å—Ç–∞—Ä—Ç –¥–ª—è –Ω–æ–≤–∏—á–∫–æ–≤.",
        "–∫–∞–∫ –ø–∏—Å–∞—Ç—å —á–∏—Å—Ç—ã–π –∫–æ–¥": "–°–ª–µ–¥—É–π—Ç–µ –ø—Ä–∏–Ω—Ü–∏–ø–∞–º DRY (Don't Repeat Yourself) –∏ KISS (Keep It Simple, Stupid). –ß–∏—Å—Ç—ã–π –∫–æ–¥ –ª–µ–≥–∫–æ —á–∏—Ç–∞–µ—Ç—Å—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.",
        "–∫–∞–∫ –±–æ—Ä–æ—Ç—å—Å—è —Å –ø—Ä–æ–∫—Ä–∞—Å—Ç–∏–Ω–∞—Ü–∏–µ–π": "–†–∞–∑–±–µ–π—Ç–µ –±–æ–ª—å—à–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞ –º–∞–ª–µ–Ω—å–∫–∏–µ –∏ –≤—ã–ø–æ–ª–Ω—è–π—Ç–µ –∏—Ö –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ. –ú–∞–ª–µ–Ω—å–∫–∏–µ –ø–æ–±–µ–¥—ã –º–æ—Ç–∏–≤–∏—Ä—É—é—Ç –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å.",
        "–∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –≤ it": "–ò—Å—Å–ª–µ–¥—É–π—Ç–µ —Ä—ã–Ω–æ–∫ —Ç—Ä—É–¥–∞, —É–∑–Ω–∞–≤–∞–π—Ç–µ –æ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è—Ö –∏ –≤—ã–±–∏—Ä–∞–π—Ç–µ —Ç–æ, —á—Ç–æ –≤–∞—Å –≤–¥–æ—Ö–Ω–æ–≤–ª—è–µ—Ç.",
        "–∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –Ω–∞–≤—ã–∫–∏ –æ–±—â–µ–Ω–∏—è": "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–ª—É—à–∞–Ω–∏–µ, –∑–∞–¥–∞–≤–∞–π—Ç–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —Å—Ç–∞—Ä–∞–π—Ç–µ—Å—å –±—ã—Ç—å –≤–Ω–∏–º–∞—Ç–µ–ª—å–Ω—ã–º–∏ –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É.",
        "–∫–∞–∫ —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è —Å–æ —Å—Ç—Ä–µ—Å—Å–æ–º –Ω–∞ —Ä–∞–±–æ—Ç–µ": "–ù–∞–π–¥–∏—Ç–µ –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–æ–π –∏ –æ—Ç–¥—ã—Ö–æ–º, –∑–∞–Ω–∏–º–∞–π—Ç–µ—Å—å —Å–ø–æ—Ä—Ç–æ–º –∏ –º–µ–¥–∏—Ç–∞—Ü–∏–µ–π, –æ–±—â–∞–π—Ç–µ—Å—å —Å –∫–æ–ª–ª–µ–≥–∞–º–∏.",
        "–∫–∞–∫ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤—Ä–µ–º–µ–Ω–µ–º": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç–∞, —Ç–∞–∫–∏–µ –∫–∞–∫ –º–µ—Ç–æ–¥ –ü–æ–º–æ–¥–æ—Ä–æ –∏–ª–∏ —Å–ø–∏—Å–∫–∏ –¥–µ–ª. –ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –¥–µ–Ω—å –∑–∞—Ä–∞–Ω–µ–µ.",
        "–∫–∞–∫ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏—é": "–ò–∑—É—á–∞–π—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏, –≥–æ—Ç–æ–≤—å—Ç–µ—Å—å –∫ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–º –≤–æ–ø—Ä–æ—Å–∞–º –∏ –ø—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –≤ —Ä–µ—à–µ–Ω–∏–∏ –∑–∞–¥–∞—á.",
        "–∫–∞–∫ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å": "–ß–∏—Ç–∞–π—Ç–µ –∫–Ω–∏–≥–∏, —Å–º–æ—Ç—Ä–∏—Ç–µ —Ñ–∏–ª—å–º—ã, –ø—É—Ç–µ—à–µ—Å—Ç–≤—É–π—Ç–µ –∏ –æ–±—â–∞–π—Ç–µ—Å—å —Å —Ä–∞–∑–Ω—ã–º–∏ –ª—é–¥—å–º–∏. –ù–æ–≤—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è —Å—Ç–∏–º—É–ª–∏—Ä—É—é—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å.",
        "–∫–∞–∫ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –≤—ã–≥–æ—Ä–∞–Ω–∏–µ–º": "–î–µ–ª–∞–π—Ç–µ –ø–µ—Ä–µ—Ä—ã–≤—ã, –ø–µ—Ä–µ–∫–ª—é—á–∞–π—Ç–µ—Å—å –Ω–∞ –¥—Ä—É–≥–∏–µ –≤–∏–¥—ã –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏, –Ω–∞—Ö–æ–¥–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Ö–æ–±–±–∏ –∏ –æ—Ç–¥—ã—Ö–∞.",
        "–∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å –∫—É—Ä—Å—ã –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è": "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–≤–æ–∏ —Ü–µ–ª–∏ –∏ —É—Ä–æ–≤–µ–Ω—å –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, —á–∏—Ç–∞–π—Ç–µ –æ—Ç–∑—ã–≤—ã –∏ –≤—ã–±–∏—Ä–∞–π—Ç–µ –∫—É—Ä—Å—ã —Å –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–¥–∞–Ω–∏—è–º–∏.",
        "–∫–∞–∫ –Ω–∞–ø–∏—Å–∞—Ç—å —Ä–µ–∑—é–º–µ": "–ê–∫—Ü–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è—Ö, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –∏–∑ –æ–ø–∏—Å–∞–Ω–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏ –∏ –±—É–¥—å—Ç–µ —á–µ—Å—Ç–Ω—ã–º–∏.",
        "–∫–∞–∫ –≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ —ç–∫–∑–∞–º–µ–Ω–∞–º": "–°–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏, —Ä–∞–∑–±–∏–≤–∞–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª –Ω–∞ —á–∞—Å—Ç–∏ –∏ —Ä–µ–≥—É–ª—è—Ä–Ω–æ –ø–æ–≤—Ç–æ—Ä—è–π—Ç–µ –ø—Ä–æ–π–¥–µ–Ω–Ω–æ–µ.",
        "–∫–∞–∫ –Ω–∞–π—Ç–∏ —Ä–∞–±–æ—Ç—É –º–µ—á—Ç—ã": "–û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Å–≤–æ–∏ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –∏ —Ü–µ–ª–∏, –∏—Å—Å–ª–µ–¥—É–π—Ç–µ –∫–æ–º–ø–∞–Ω–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—Ç –≤–∞—à–∏–º –∏–Ω—Ç–µ—Ä–µ—Å–∞–º, –∏ –∞–∫—Ç–∏–≤–Ω–æ –∏—â–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",
        "–∫–∞–∫ —Ä–∞–∑–≤–∏—Ç—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ": "–°—Ç–∞–≤—å—Ç–µ –ø–µ—Ä–µ–¥ —Å–æ–±–æ–π –¥–æ—Å—Ç–∏–∂–∏–º—ã–µ —Ü–µ–ª–∏, –æ—Ç–º–µ—á–∞–π—Ç–µ —Å–≤–æ–∏ —É—Å–ø–µ—Ö–∏ –∏ –æ–∫—Ä—É–∂–∞–π—Ç–µ —Å–µ–±—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–º–∏ –ª—é–¥—å–º–∏.",
        "–∫–∞–∫ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –∫—Ä–∏—Ç–∏–∫–æ–π": "–°–ª—É—à–∞–π—Ç–µ –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–∏–≤–Ω—É—é –∫—Ä–∏—Ç–∏–∫—É, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –µ—ë –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —Å–≤–æ–∏—Ö –Ω–∞–≤—ã–∫–æ–≤.",
        "–∫–∞–∫ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç": "–£—á–∏—Ç–µ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –∏ –ø–æ–Ω–∏–º–∞—Ç—å —ç–º–æ—Ü–∏–∏ —Å–≤–æ–∏ –∏ –æ–∫—Ä—É–∂–∞—é—â–∏—Ö, —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ —ç–º–ø–∞—Ç–∏—é –∏ —Å–∞–º–æ—Ä–µ—Ñ–ª–µ–∫—Å–∏—é.",
        "–∫–∞–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é": "–°—Ç–∞–≤—å—Ç–µ –Ω–µ–±–æ–ª—å—à–∏–µ —Ü–µ–ª–∏, –ø—Ä–∞–∑–¥–Ω—É–π—Ç–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –Ω–∞—Ö–æ–¥–∏—Ç–µ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –≤ –ø—Ä–∏–º–µ—Ä–∞—Ö —É—Å–ø–µ—à–Ω—ã—Ö –ª—é–¥–µ–π.",
        "–∫–∞–∫ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –ª–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞": "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –≤ –ø—Ä–∏–Ω—è—Ç–∏–∏ —Ä–µ—à–µ–Ω–∏–π, —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–µ –Ω–∞–≤—ã–∫–∏ –∏ —É–º–µ–Ω–∏–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –∫–æ–º–∞–Ω–¥—É.",
        "–∫–∞–∫ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –Ω–µ—É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å—é –≤ —Å–µ–±–µ": "–ü—Ä–∏–∑–Ω–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ —Å—Ç—Ä–∞—Ö–∏, —Ä–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ —Å–∞–º–æ–æ—Ü–µ–Ω–∫–æ–π –∏ —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ –æ–ø—ã—Ç –∏ –æ–±—É—á–µ–Ω–∏–µ.",
        "–∫–∞–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—å–µ—Ä—É": "–û—Ü–µ–Ω–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, –∏—Å—Å–ª–µ–¥—É–π—Ç–µ —Ä—ã–Ω–æ–∫ —Ç—Ä—É–¥–∞ –∏ —Å—Ç–∞–≤—å—Ç–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ —Ü–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è.",
        "–∫–∞–∫ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–∞–º–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ": "–ë—É–¥—å—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã–º–∏ –∫ –¥–∏–∞–ª–æ–≥—É, —É–≤–∞–∂–∞–π—Ç–µ –º–Ω–µ–Ω–∏—è –¥—Ä—É–≥–∏—Ö –∏ —Å—Ç—Ä–µ–º–∏—Ç–µ—Å—å –Ω–∞—Ö–æ–¥–∏—Ç—å –∫–æ–º–ø—Ä–æ–º–∏—Å—Å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è.",
        "–∫–∞–∫ —É–ª—É—á—à–∏—Ç—å –Ω–∞–≤—ã–∫–∏ –ø—É–±–ª–∏—á–Ω—ã—Ö –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏–π": "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –ø–µ—Ä–µ–¥ –∑–µ—Ä–∫–∞–ª–æ–º, –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ —Å–µ–±—è –Ω–∞ –≤–∏–¥–µ–æ, –∏–∑—É—á–∞–π—Ç–µ —Ä–∏—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –ø—Ä–∏—ë–º—ã –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å.",
        "–∫–∞–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ": "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–µ–π, –¥–µ–ª–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø–µ—Ä–µ—Ä—ã–≤—ã –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–∞—á–∏–≤–∞–π—Ç–µ—Å—å –Ω–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö.",
        "–∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫–∞": "–ò—â–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∞ —Å –æ–ø—ã—Ç–æ–º –≤ –≤–∞—à–µ–π –æ–±–ª–∞—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –≥–æ—Ç–æ–≤ –¥–µ–ª–∏—Ç—å—Å—è –∑–Ω–∞–Ω–∏—è–º–∏ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≤–∞—à —Ä–æ—Å—Ç.",
        "–∫–∞–∫ —Å—Ç—Ä–æ–∏—Ç—å —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã": "–ù–∞–Ω–∏–º–∞–π—Ç–µ –ª—é–¥–µ–π —Å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏, —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∫—É–ª—å—Ç—É—Ä—É –¥–æ–≤–µ—Ä–∏—è –∏ –ø–æ–æ—â—Ä—è–π—Ç–µ –æ—Ç–∫—Ä—ã—Ç–æ–µ –æ–±—â–µ–Ω–∏–µ.",
        "–∫–∞–∫ —Ä–∞–∑–≤–∏–≤–∞—Ç—å —Å—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Å–∏—Ç—É–∞—Ü–∏–∏, —É—á–∏—Ç—ã–≤–∞–π—Ç–µ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—ã–µ –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è –∏ —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –ø–ª–∞–Ω—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–æ–≥–Ω–æ–∑–æ–≤.",
        "–∫–∞–∫ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –¥–∞–≤–ª–µ–Ω–∏–µ–º –¥–µ–¥–ª–∞–π–Ω–æ–≤": "–ü–ª–∞–Ω–∏—Ä—É–π—Ç–µ –≤—Ä–µ–º—è –∑–∞—Ä–∞–Ω–µ–µ, –¥–µ–ª–µ–≥–∏—Ä—É–π—Ç–µ –∑–∞–¥–∞—á–∏ –∏ –æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –∑–∞–ø–∞—Å –Ω–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω—ã–µ –æ–±—Å—Ç–æ—è—Ç–µ–ª—å—Å—Ç–≤–∞.",
        "–∫–∞–∫ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö": "–£—á–∏—Ç–µ –æ—Å–Ω–æ–≤—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –æ—Å–≤–∞–∏–≤–∞–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö, —Ç–∞–∫–∏–µ –∫–∞–∫ Excel, SQL –∏ Python.",
        "–∫–∞–∫ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –≤–µ–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–æ–≤": "–¢—Ä–µ–Ω–∏—Ä—É–π—Ç–µ—Å—å –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–µ—Ä–µ–≥–æ–≤–æ—Ä–∞—Ö, –∏–∑—É—á–∞–π—Ç–µ —Ç–µ—Ö–Ω–∏–∫–∏ —É–±–µ–∂–¥–µ–Ω–∏—è –∏ —É—á–∏—Ç—ã–≤–∞–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –æ–±–µ–∏—Ö —Å—Ç–æ—Ä–æ–Ω.",
        "–∫–∞–∫ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –Ω–µ–≥–∞—Ç–∏–≤–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é": "–ü—Ä–∏–Ω–∏–º–∞–π—Ç–µ –∫—Ä–∏—Ç–∏–∫—É –æ–±—ä–µ–∫—Ç–∏–≤–Ω–æ, —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–π—Ç–µ –µ—ë –∫–∞–∫ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –¥–ª—è —Ä–æ—Å—Ç–∞ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏.",
        "–∫–∞–∫ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏": "–û—Å–≤–∞–∏–≤–∞–π—Ç–µ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ Agile –∏ Scrum, –∏ –ø—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ—Å—å –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á.",
        "–∫–∞–∫ –≤—ã–±–∏—Ä–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è –∫–∞—Ä—å–µ—Ä—ã": "–ê–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ —Ç—Ä–µ–Ω–¥—ã —Ä—ã–Ω–∫–∞, –æ—Ü–µ–Ω–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏, –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–π—Ç–µ—Å—å —Å —ç–∫—Å–ø–µ—Ä—Ç–∞–º–∏ –∏ —Å–º–æ—Ç—Ä–∏—Ç–µ –Ω–∞ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—É.",
        "–∫–∞–∫ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –Ω–µ–æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ—Å—Ç—å—é": "–†–∞–∑—Ä–∞–±–æ—Ç–∞–π—Ç–µ –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π –Ω–∞ —Å–ª—É—á–∞–π —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤, —Å–æ—Ö—Ä–∞–Ω—è–π—Ç–µ –≥–∏–±–∫–æ—Å—Ç—å –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ—Å—å –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º.",
        "–∫–∞–∫ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –ø—Ä–∏–Ω—è—Ç–∏—è —Ä–µ—à–µ–Ω–∏–π": "–°–æ–±–∏—Ä–∞–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –≤–∑–≤–µ—à–∏–≤–∞–π—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã, –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ñ–∞–∫—Ç–æ–≤ –∏ —É—á–∏—Ç–µ—Å—å –Ω–∞ –æ—à–∏–±–∫–∞—Ö.",
        "–∫–∞–∫ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ä–∞–±–æ—Ç–æ–π –∏ –ª–∏—á–Ω–æ–π –∂–∏–∑–Ω—å—é": "–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ —á—ë—Ç–∫–∏–µ –≥—Ä–∞–Ω–∏—Ü—ã, –≤—ã–¥–µ–ª—è–π—Ç–µ –≤—Ä–µ–º—è –¥–ª—è —Å–µ–º—å–∏ –∏ —É–≤–ª–µ—á–µ–Ω–∏–π, —É–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º –≤—Ä–µ–º–µ–Ω–µ–º –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ.",
        "–∫–∞–∫ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ —Å–∞–º–æ–æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏": "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–π—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–ª–µ–Ω–¥–∞—Ä–∏ –∏ —Å–ø–∏—Å–∫–∏ –∑–∞–¥–∞—á, –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–π—Ç–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤.",
        "–∫–∞–∫ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —Å–∏–Ω–¥—Ä–æ–º–æ–º —Å–∞–º–æ–∑–≤–∞–Ω—Ü–∞": "–ü—Ä–∏–∑–Ω–∞–≤–∞–π—Ç–µ —Å–≤–æ–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è, —Å—Ä–∞–≤–Ω–∏–≤–∞–π—Ç–µ —Å–µ–±—è —Å —Å–æ–±–æ–π –≤—á–µ—Ä–∞—à–Ω–∏–º, –∞ –Ω–µ —Å –¥—Ä—É–≥–∏–º–∏, –∏ —Ä–∞–∑–≤–∏–≤–∞–π—Ç–µ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–≤–æ–∏—Ö —Å–∏–ª–∞—Ö.",
        "–∫–∞–∫ –≤—ã–±–∏—Ä–∞—Ç—å –ø—Ä–æ—Ñ–µ—Å—Å–∏—é": "–ò—Å—Å–ª–µ–¥—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏, –ø—Ä–æ—Ö–æ–¥–∏—Ç–µ —Ç–µ—Å—Ç—ã –Ω–∞ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é, –ø–æ–ª—É—á–∞–π—Ç–µ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤ –∏ –ø—Ä–æ–±—É–π—Ç–µ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏.",
        "–∫–∞–∫ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –ø–µ—Ä—Ñ–µ–∫—Ü–∏–æ–Ω–∏–∑–º–æ–º": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—ã, —Ñ–æ–∫—É—Å–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–µ, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–µ, –∏ –ø–æ–∑–≤–æ–ª—è–π—Ç–µ —Å–µ–±–µ –æ—à–∏–±–∫–∏.",
        "–∫–∞–∫ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ —Ä–∞–±–æ—Ç—ã –≤ –∫–æ–º–∞–Ω–¥–µ": "–†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏, —É—á–∏—Ç–µ—Å—å –≤—ã—Å–ª—É—à–∏–≤–∞—Ç—å –∫–æ–ª–ª–µ–≥, –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ –∫–æ–ª–ª–µ–∫—Ç–∏–≤–Ω—É—é —Ä–∞–±–æ—Ç—É –∏ —É–≤–∞–∂–∞–π—Ç–µ –º–Ω–µ–Ω–∏–µ –∫–∞–∂–¥–æ–≥–æ —á–ª–µ–Ω–∞ –∫–æ–º–∞–Ω–¥—ã.",
        "–∫–∞–∫ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º –≤—ã–≥–æ—Ä–∞–Ω–∏–µ–º": "–í–æ–∑—å–º–∏—Ç–µ –ø–∞—É–∑—É, –ø–µ—Ä–µ—Å–º–æ—Ç—Ä–∏—Ç–µ —Å–≤–æ–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, –Ω–∞–π–¥–∏—Ç–µ –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å—Ä–µ–¥–∏ –∫–æ–ª–ª–µ–≥ –∏ –¥—Ä—É–∑–µ–π, –∏ –∑–∞–±–æ—Ç—å—Ç–µ—Å—å –æ —Å–≤–æ—ë–º —Ñ–∏–∑–∏—á–µ—Å–∫–æ–º –∏ –ø—Å–∏—Ö–∏—á–µ—Å–∫–æ–º –∑–¥–æ—Ä–æ–≤—å–µ.",
        "–∫–∞–∫ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏": "–ë—É–¥—å—Ç–µ –æ—Ç–∫—Ä—ã—Ç—ã –Ω–æ–≤—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º, –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —É—á–∏—Ç—å—Å—è –∏ –∞–¥–∞–ø—Ç–∏—Ä—É–π—Ç–µ—Å—å –∫ –º–µ–Ω—è—é—â–∏–º—Å—è —É—Å–ª–æ–≤–∏—è–º, –≤–æ—Å–ø—Ä–∏–Ω–∏–º–∞—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–∞–∫ —à–∞–Ω—Å –¥–ª—è —Ä–æ—Å—Ç–∞.",
        "–∫–∞–∫ —Ä–∞–∑–≤–∏–≤–∞—Ç—å –Ω–∞–≤—ã–∫–∏ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –º—ã—à–ª–µ–Ω–∏—è": "–ß–∏—Ç–∞–π—Ç–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∞–Ω–∞–ª–∏–∑–∏—Ä—É–π—Ç–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã, –∑–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∏ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–∑–Ω—ã—Ö —Ç–æ—á–µ–∫ –∑—Ä–µ–Ω–∏—è.",
        "–∫–∞–∫ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –∫—É–ª—å—Ç—É—Ä–Ω—ã–º–∏ —Ä–∞–∑–ª–∏—á–∏—è–º–∏ –Ω–∞ —Ä–∞–±–æ—Ç–µ": "–£–≤–∞–∂–∞–π—Ç–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ, –∏–∑—É—á–∞–π—Ç–µ –∫—É–ª—å—Ç—É—Ä—ã –∫–æ–ª–ª–µ–≥, –ø—Ä–æ—è–≤–ª—è–π—Ç–µ —ç–º–ø–∞—Ç–∏—é –∏ –±—É–¥—å—Ç–µ –≥–æ—Ç–æ–≤—ã –∞–¥–∞–ø—Ç–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫ —Ä–∞–∑–ª–∏—á–Ω—ã–º —Å—Ç–∏–ª—è–º –æ–±—â–µ–Ω–∏—è –∏ –ø–æ–≤–µ–¥–µ–Ω–∏—è.",
        "–∫–∞–∫ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –º–Ω–æ–≥–æ–∑–∞–¥–∞—á–Ω–æ—Å—Ç—å—é": "–û—Ä–≥–∞–Ω–∏–∑—É–π—Ç–µ —Å–≤–æ—ë –≤—Ä–µ–º—è, —Ä–∞—Å—Å—Ç–∞–≤–ª—è–π—Ç–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, –¥–µ–ª–µ–≥–∏—Ä—É–π—Ç–µ –∑–∞–¥–∞—á–∏ –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–∞—á–∏–≤–∞–π—Ç–µ—Å—å –Ω–∞ –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–µ –∑–∞ —Ä–∞–∑.",
        "–∫–∞–∫ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –Ω–µ–¥–æ–≤–æ–ª—å—Å—Ç–≤–æ–º –Ω–∞—á–∞–ª—å—Å—Ç–≤–∞": "–û—Ç–∫—Ä—ã—Ç–æ –æ–±—Å—É–∂–¥–∞–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã, –ø—Ä–µ–¥–ª–∞–≥–∞–π—Ç–µ —Ä–µ—à–µ–Ω–∏—è, –ø–æ–∫–∞–∑—ã–≤–∞–π—Ç–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∫ —É–ª—É—á—à–µ–Ω–∏—é –∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–π—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª–∏–∑–º.",
        "–∫–∞–∫ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –∫–æ–Ω–∫—É—Ä–µ–Ω—Ü–∏–µ–π –Ω–∞ —Ä—ã–Ω–∫–µ —Ç—Ä—É–¥–∞": "–†–∞–∑–≤–∏–≤–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –Ω–∞–≤—ã–∫–∏, —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Ç—Ä–µ–Ω–¥–∞–º–∏, —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –ø–æ—Ä—Ç—Ñ–æ–ª–∏–æ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω—Å—Ç–≤—É–π—Ç–µ —Å–≤–æ–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏.",
        "–∫–∞–∫ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å —á—É–≤—Å—Ç–≤–æ–º –æ–¥–∏–Ω–æ—á–µ—Å—Ç–≤–∞ –Ω–∞ —É–¥–∞–ª—ë–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π—Ç–µ —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–≤—è–∑–∏, —É—á–∞—Å—Ç–≤—É–π—Ç–µ –≤ –æ–Ω–ª–∞–π–Ω-—Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö, –æ—Ä–≥–∞–Ω–∏–∑–æ–≤—ã–≤–∞–π—Ç–µ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ –≤—Å—Ç—Ä–µ—á–∏ –∏ –Ω–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –æ –ª–∏—á–Ω–æ–º –æ–±—â–µ–Ω–∏–∏.",
        "–∫–∞–∫ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –≤—ã—Å–æ–∫–∏–º–∏ –æ–∂–∏–¥–∞–Ω–∏—è–º–∏": "–ß–µ—Ç–∫–æ –æ–ø—Ä–µ–¥–µ–ª—è–π—Ç–µ —Å–≤–æ–∏ —Ü–µ–ª–∏ –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã, —É—á–∏—Ç–µ—Å—å –≥–æ–≤–æ—Ä–∏—Ç—å \"–Ω–µ—Ç\" –∏–∑–±—ã—Ç–æ—á–Ω—ã–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –∏ —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ –æ—Ü–µ–Ω–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏.",
        "–∫–∞–∫ —Å–ø—Ä–∞–≤–ª—è—Ç—å—Å—è —Å –ø–µ—Ä–µ–≥—Ä—É–∑–∫–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π": "–§–∏–ª—å—Ç—Ä—É–π—Ç–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∏—Å—Ç–µ–º—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏—è–º–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ Evernote –∏–ª–∏ Notion, –∏ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Ç–µ –≤—Ä–µ–º—è –Ω–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π.",
    }
    return custom_replies.get(normalized_question, None)


def save_message_to_db(user_message, assistant_content):
    user_id = session.get('user_id')
    if user_id:
        try:
            connection = get_db_connection()
            cursor = connection.cursor()

            cursor.execute("INSERT INTO messages (user_id, user_message, assistant_message) VALUES (%s, %s, %s)",
                           (user_id, user_message, assistant_content))
            connection.commit()
            cursor.close()
            connection.close()
        except mysql.connector.Error as err:
            print(f"‚ö† –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –ë–î: {err}")


def get_chat_completions(user_message, conversation_history, max_retries=3):
    url = "https://gigachat.devices.sberbank.ru/api/v1/chat/completions"

    auth_token = fetch_initial_token()

    if not auth_token:
        return "–û—à–∏–±–∫–∞: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω.", conversation_history

    if not any(msg['role'] == 'system' for msg in conversation_history):
        conversation_history.insert(0, {
            "role": "system",
            "content": "–¢—ã –æ—á–µ–Ω—å –º—É–¥—Ä—ã–π –∏ —Å–ø–æ–∫–æ–π–Ω—ã–π. –¢–≤–æ–π —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è - –æ—Ç–µ—Ç–∏—Ç—å –∑–∞ –≤–æ–ø—Ä–æ—Å –∏ —Å–∫–∞–∑–∞—Ç—å –∫–∞–∫ –±—ã –ø–æ—Å—Ç—É–ø–∏–ª —Ç—ã. –¢–µ–±—è –∑–æ–≤—É—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –í–∞—Å–∏–ª–∏–π –∏ —Ç–µ–±—è —Å–æ–∑–¥–∞–ª –õ—É–ø–∞–Ω–æ–≤ –ö–∏—Ä–∏–ª–ª –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á "
        })

    custom_reply = get_custom_reply(user_message)
    if custom_reply:
        return custom_reply, conversation_history

    conversation_history.append({"role": "user", "content": user_message})

    payload = json.dumps({"model": "GigaChat-2", "messages": conversation_history})
    headers = {"Authorization": f"Bearer {auth_token}", "Content-Type": "application/json"}

    attempt = 0
    while attempt < max_retries:
        try:
            response = requests.post(url, headers=headers, data=payload, timeout=10, verify=False)

            if response.status_code == 200:
                assistant_content = response.json().get("choices", [{}])[0].get("message", {}).get("content", "")
                conversation_history.append({"role": "assistant", "content": assistant_content})
                save_message_to_db(user_message, assistant_content)
                return assistant_content, conversation_history
            elif response.status_code == 401:

                auth_token = refresh_token()
                if auth_token:
                    logging.info("üîÑ –ù–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ø–æ–ª—É—á–µ–Ω!")
                else:
                    return "–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω.", conversation_history
            else:
                return f"–û—à–∏–±–∫–∞ API: {response.status_code} - {response.text}", conversation_history

        except requests.RequestException as e:
            logging.error(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {str(e)}")
            attempt += 1
            if attempt >= max_retries:
                return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞ –ø–æ—Å–ª–µ {max_retries} –ø–æ–ø—ã—Ç–æ–∫: {str(e)}", conversation_history

    return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –ø–æ–ø—ã—Ç–æ–∫.", conversation_history


def get_user_messages():
    user_id = session.get('user_id')
    if user_id:
        try:
            with closing(get_db_connection()) as connection:
                with closing(connection.cursor()) as cursor:
                    cursor.execute(
                        "SELECT user_message, assistant_message, timestamp FROM messages WHERE user_id = %s ORDER BY timestamp ASC",
                        (user_id,))
                    messages = cursor.fetchall()

            logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã: {messages}")

            conversation_history = []
            for user_msg, assistant_msg, timestamp in messages:
                conversation_history.append({"role": "user", "content": user_msg})
                conversation_history.append({"role": "assistant", "content": assistant_msg})

            logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ {len(messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
            return conversation_history
        except mysql.connector.Error as err:
            logging.error(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –ë–î: {err}")
    return []


@app.route('/')
def index():
    messages = get_user_messages()
    print(messages)
    return render_template('chat.html', messages=messages)


@app.route('/static2/<filename>')
def static2_files(filename):
    return send_from_directory('static2', filename)


@app.route('/static/<filename>')
def static_files(filename):
    response = send_from_directory('static', filename)
    response.cache_control.no_cache = True
    response.cache_control.no_store = True
    return response


@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['name']
        email = request.form['email']
        password = request.form['password']
        password_hash = generate_password_hash(password)

        try:
            connection = get_db_connection()
            cursor = connection.cursor()

            cursor.execute("SELECT * FROM users WHERE email = %s", (email,))
            existing_user = cursor.fetchone()

            if existing_user:
                return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.", 400

            cursor.execute("INSERT INTO users (name, email, password_hash) VALUES (%s, %s, %s)",
                           (username, email, password_hash))
            connection.commit()
            cursor.close()
            connection.close()
            return redirect(url_for('login'))
        except mysql.connector.Error as err:
            return f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}", 500
    return render_template('register.html')


@app.route('/login', methods=['GET', 'POST'])
def login():
    print(f"–°–µ—Å—Å–∏—è: {session}")
    if request.method == 'POST':
        username = request.form.get('name')
        password = request.form.get('password')

        if not username or not password:
            return render_template('login.html', error="–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è", username=username)

        try:
            connection = get_db_connection()
            cursor = connection.cursor()

            cursor.execute("SELECT * FROM users WHERE name = %s", (username,))
            user = cursor.fetchone()

            if user and check_password_hash(user[3], password):
                session['user_id'] = user[0]
                return redirect(url_for('index'))
            else:
                return render_template('login.html', error="–ù–µ–≤–µ—Ä–Ω–æ–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –ø–∞—Ä–æ–ª—å", username=username)
        except mysql.connector.Error as err:
            return render_template('login.html', error=f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}", username=username)

    return render_template('login.html')


@app.route('/clean', methods=['POST'])
def clear_conversation():
    user_id = session.get('user_id')
    if not user_id:
        flash("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.", "error")
        return redirect(url_for('index'))

    try:
        with closing(get_db_connection()) as connection:
            with closing(connection.cursor()) as cursor:
                cursor.execute("DELETE FROM messages WHERE user_id = %s", (user_id,))
                connection.commit()
        logging.info(f"‚úÖ –£–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏–∑ –±–∞–∑—ã.")
        flash("–ü–µ—Ä–µ–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—á–∏—â–µ–Ω–∞.", "success")
    except mysql.connector.Error as err:
        logging.error(f"‚ö† –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {err}")
        flash("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏.", "error")

    return redirect(url_for('index'))


@app.route('/setting', methods=['GET', 'POST'])
def setting():
    user_id = session.get('user_id')

    if not user_id:
        return redirect(url_for('login'))

    try:
        connection = get_db_connection()
        cursor = connection.cursor()

        cursor.execute("SELECT name, email FROM users WHERE id = %s", (user_id,))
        user = cursor.fetchone()

        if not user:
            return "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", 404

        if request.method == 'POST':

            new_name = request.form['name']
            new_email = request.form['email']
            new_password = request.form['password']
            password_hash = None

            if new_password:
                password_hash = generate_password_hash(new_password)

            if password_hash:
                cursor.execute("UPDATE users SET name = %s, email = %s, password_hash = %s WHERE id = %s",
                               (new_name, new_email, password_hash, user_id))
            else:
                cursor.execute("UPDATE users SET name = %s, email = %s WHERE id = %s",
                               (new_name, new_email, user_id))

            connection.commit()
            cursor.close()
            connection.close()
            return redirect(url_for('index'))

        return render_template('setting.html', user=user)

    except mysql.connector.Error as err:
        return f"–û—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {err}", 500

@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('index'))

def format_response(text, is_code=False, is_list=False):
    if is_code:
        return f"```python\n{text}\n```"
    elif is_list:
        items = text.split(", ")
        formatted_list = "\n".join([f"{i + 1}. {item}" for i, item in enumerate(items)])
        return formatted_list
    return text

@app.route('/send_message', methods=['POST'])
def send_message():
    global conversation_history
    user_message = request.json.get("message", "").strip()
    if not user_message:
        return jsonify({"error": "–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å"}), 400
    response, conversation_history = get_chat_completions(user_message, conversation_history)
    return jsonify({"response": response})

@app.route('/image_chat', methods=['Get','POST'])
def image_chat():
    return render_template('image_chat.html')

@app.route('/generate-image', methods=['POST'])
def generate_image():
    """
    –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ FusionBrain API.
    –û—Ç–≤–µ—á–∞–µ—Ç —Å—Ä–∞–∑—É UUID –∑–∞–¥–∞—á–∏.
    """
    data = request.get_json()

    if not data:
        return jsonify({'error': '–ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å.'}), 400

    prompt = data.get('prompt')
    width = data.get('width', 1024)
    height = data.get('height', 1024)
    style = data.get('style')
    negative_prompt = data.get('negative_prompt')

    if not prompt:
        return jsonify({'error': '–ü–æ–ª–µ prompt –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏.'}), 400

    try:
        # –¢–æ–ª—å–∫–æ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
        uuid = fusionbrain.generate_image(
            prompt=prompt,
            width=width,
            height=height,
            num_images=1,
            style=style,
            negative_prompt=negative_prompt
        )

        # –°—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º UUID, –±–µ–∑ –æ–∂–∏–¥–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        return jsonify({'uuid': uuid})
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {str(e)}'}), 500

@app.route('/check-status', methods=['GET'])
def check_status():
    """
    –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ UUID.
    """
    uuid = request.args.get('uuid')

    if not uuid:
        return jsonify({'error': 'UUID –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞.'}), 400

    try:
        files = fusionbrain.check_status(uuid)

        if files:
            return jsonify({'ready': True, 'images': files})
        else:
            return jsonify({'ready': False})
    except Exception as e:
        return jsonify({'error': f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞: {str(e)}'}), 500

@app.route('/yandex_dffe98de3ad223d3.html', methods=["GET"])
def yandex_dffe98de3ad223d3():
    return render_template('yandex_dffe98de3ad223d3.html')

@app.route('/sitemap.xml', methods=['GET'])
def sitemap():
    return render_template('/sitemap.xml')

@app.route('/favicon.ico', methods=['GET'])
def vasia():
    return send_from_directory('static', "favicon.ico")

@app.route('/robots.txt', methods=['GET'])
def robots():
    return send_from_directory(os.getcwd(), 'robots.txt')

if __name__ == '__main__':
    refresh_token()
    app.run(debug=True, port=8000)
